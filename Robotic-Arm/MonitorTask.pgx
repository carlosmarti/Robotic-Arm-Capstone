<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="monitorTask">
    <Locals>
      <Local name="l_nSetReturnVal" type="num" xsi:type="array" size="1" />
      <Local name="l_nBuffByteOut" type="num" xsi:type="array" size="104" />
      <Local name="l_nBuffInArray" type="num" xsi:type="array" size="3" />
      <Local name="l_nSTATE" type="num" xsi:type="array" size="1" />
      <Local name="l_sCommand" type="string" xsi:type="array" size="1" />
      <Local name="i" type="num" xsi:type="array" size="1" />
      <Local name="l_sConnType" type="string" xsi:type="array" size="1" />
      <Local name="l_sServerIP" type="string" xsi:type="array" size="1" />
      <Local name="l_nStringLen" type="num" xsi:type="array" size="1" />
      <Local name="l_nConcatBuffer" type="num" xsi:type="array" size="150" />
      <Local name="l_sSendString" type="string" xsi:type="array" size="1" />
      <Local name="l_sInfo" type="string" xsi:type="array" size="7" />
      <Local name="l_sSioServer" type="sio" xsi:type="array" size="1" />
      <Local name="l_nLineCounter" type="num" xsi:type="array" size="1" />
      <Local name="l_bLoop" type="bool" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  //Initializations
  sioLink(l_sSioServer,sioserver)
  l_bLoop = true
  l_nSTATE = 0
  //Get Controller Info
  l_sInfo[0] = getVersion("VAL3")
  l_sInfo[1] = getVersion("ArmType")
  l_sInfo[2] = getVersion("Tuning")
  l_sInfo[3] = getVersion("Mounting")
  l_sInfo[4] = getVersion("ControllerSN")
  l_sInfo[5] = getVersion("ArmSN")
  l_sInfo[6] = getVersion("Starc")
  l_sSendString ="I4," + l_sInfo[0] + "," + l_sInfo[1] + "," + l_sInfo[2] + "," + l_sInfo[3] + "," + l_sInfo[4] + "," + l_sInfo[5] + "," + l_sInfo[6]
  l_nStringLen = len(l_sSendString)
  for i = 0 to l_nStringLen - 1 step 1
  l_nConcatBuffer[i] = asc(l_sSendString, i)
  endFor 
cls()
      l_nLineCounter = 0
  while true
    //////////////////////No connection open////////////////////////////////////
    if(l_nSTATE == 0)
      l_nSetReturnVal = -1
      //clearBuffer(l_sSioServer)
      l_nBuffInArray = 0
      delay(0)
      l_nSetReturnVal = sioGet(l_sSioServer, l_nBuffInArray)
      delay(0)
      if(l_nSetReturnVal > 0)
        put(l_nSetReturnVal)
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        l_nSTATE = 1
      //end of return value conditional
      endIf     
      //////////////////////Connection attempt initiated//////////////////////////
    elseIf(l_nSTATE == 1)
      cls()
      l_nLineCounter = 1
      put("Got Something!")
      gotoxy(0, l_nLineCounter)
      l_nLineCounter = l_nLineCounter + 1
      // Read the command that was sent
      l_sCommand = "" 
      for i = 0 to l_nSetReturnVal - 1 step 1
        l_sCommand = l_sCommand + chr(l_nBuffInArray[i])
      endFor 
      put(l_sCommand)
      gotoxy(0,l_nLineCounter)
      l_nLineCounter = l_nLineCounter + 1
      //First 3 Characters determine connection type
      l_sConnType = ""
      l_sConnType = left(l_sCommand, 3)
      //If first 3 characters of command = 'INF' then send back the information string
      if(l_sConnType == "INF")
        put("Info Command")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        l_nSetReturnVal=sioSet(l_sSioServer,l_nConcatBuffer)
        l_nSTATE = 0    
        //If the first 3 Chars are MVX, interperet point requested and move accordingly  
        //command to move to predefined point 3
      elseIf(l_sConnType == "MV1")
        put("Move1 Command")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        movej(p1, flange, mNomSpeed)
        waitEndMove()
        put("End of move")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        l_nSTATE = 0
        //command to move to predefined point 2
      elseIf (l_sConnType == "MV2")
        put("Move2 Command")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        movej(p2, flange, mNomSpeed)
        waitEndMove()
        put("End of move")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        l_nSTATE = 0
        //command to move to predefined point 3
      elseIf(l_sConnType == "MV3")
        put("Move3 Command")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        movej(p3, flange, mNomSpeed)
        waitEndMove()
        put("End of move")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        l_nSTATE = 0
        
      elseIf(l_sConnType == "LOP")
        put("Loop command")
        gotoxy(0, l_nLineCounter)
        l_nLineCounter = l_nLineCounter + 1
        
        while (l_bLoop)
          movej(p1, flange, mNomSpeed)
          movej(p2, flange, mNomSpeed)
          movej(p3, flange, mNomSpeed)
          waitEndMove()
          delay(0)
          l_nSetReturnVal = sioGet(l_sSioServer, l_nBuffInArray)
          delay(0)
          l_sCommand = "" 
          put(l_sCommand)
          gotoxy(0, l_nLineCounter)
          l_nLineCounter = l_nLineCounter + 1
          for i = 0 to l_nSetReturnVal - 1 step 1
            l_sCommand = l_sCommand + chr(l_nBuffInArray[i])
          endFor
          put(l_sCommand)
          gotoxy(0, l_nLineCounter)
          l_nLineCounter = l_nLineCounter + 1
          
          if (l_sCommand == "STP")
            l_bLoop = false
            put("Stopping loop command")
            gotoxy(0, l_nLineCounter)
            l_nLineCounter = l_nLineCounter + 1
            l_nSTATE = 0
          endIf  
        //end of movement loop
        endWhile
      //end of connType conditional
      endIf
    
      delay(0)
    //end of state conditional
    endIf
    put("State 0 Entered")
    gotoxy(0, l_nLineCounter)
    l_nLineCounter = l_nLineCounter + 1
  endWhile
end]]></Code>
  </Program>
</Programs>